package com.qbe.cotizador.servlets.producto.agricola;

import java.math.BigInteger;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import com.qbe.cotizador.dao.cotizacion.CotizacionDAO;
import com.qbe.cotizador.dao.cotizacion.CotizacionDetalleDAO;
import com.qbe.cotizador.dao.cotizacion.EndosoBeneficiarioDAO;
import com.qbe.cotizador.dao.cotizacion.EstadoDAO;
import com.qbe.cotizador.dao.cotizacion.ProductoXPuntoVentaDAO;
import com.qbe.cotizador.dao.entidad.AgenteDAO;
import com.qbe.cotizador.dao.entidad.BeneficiarioDAO;
import com.qbe.cotizador.dao.entidad.CantonDAO;
import com.qbe.cotizador.dao.entidad.CiudadDAO;
import com.qbe.cotizador.dao.entidad.ClienteDAO;
import com.qbe.cotizador.dao.entidad.DireccionDAO;
import com.qbe.cotizador.dao.entidad.EntidadDAO;
import com.qbe.cotizador.dao.entidad.ProvinciaDAO;
import com.qbe.cotizador.dao.entidad.PuntoVentaDAO;
import com.qbe.cotizador.dao.entidad.TipoDireccionDAO;
import com.qbe.cotizador.dao.entidad.UnidadNegocioDAO;
import com.qbe.cotizador.dao.entidad.ZonaDAO;
import com.qbe.cotizador.dao.producto.agricola.AgriAuditoriaCotizacionDAO;
import com.qbe.cotizador.dao.producto.agricola.AgriCanalDAO;
import com.qbe.cotizador.dao.producto.agricola.AgriObjetoCotizacionDAO;
import com.qbe.cotizador.dao.producto.agricola.AgriParametroXCanalDAO;
import com.qbe.cotizador.dao.producto.agricola.AgriParametroXPuntoVentaDAO;
import com.qbe.cotizador.dao.producto.agricola.AgriTipoCultivoDAO;
import com.qbe.cotizador.dao.producto.agricola.UsuariosOfflineDAO;
import com.qbe.cotizador.dao.seguridad.TipoVariableDAO;
import com.qbe.cotizador.dao.seguridad.VariableSistemaDAO;
import com.qbe.cotizador.model.Agente;
import com.qbe.cotizador.model.AgriAuditoriaCotizacion;
import com.qbe.cotizador.model.AgriCanal;
import com.qbe.cotizador.model.AgriObjetoCotizacion;
import com.qbe.cotizador.model.AgriParametroXCanal;
import com.qbe.cotizador.model.AgriParametroXPuntoVenta;
import com.qbe.cotizador.model.AgriSucreAuditoria;
import com.qbe.cotizador.model.AgriTipoCultivo;
import com.qbe.cotizador.model.Beneficiario;
import com.qbe.cotizador.model.Provincia;
import com.qbe.cotizador.model.Canton;
import com.qbe.cotizador.model.Ciudad;
import com.qbe.cotizador.model.Cliente;
import com.qbe.cotizador.model.Cotizacion;
import com.qbe.cotizador.model.CotizacionDetalle;
import com.qbe.cotizador.model.CotizacionRespuesta;
import com.qbe.cotizador.model.Direccion;
import com.qbe.cotizador.model.EndosoBeneficiario;
import com.qbe.cotizador.model.Entidad;
import com.qbe.cotizador.model.Estado;
import com.qbe.cotizador.model.ProductoXPuntoVenta;
import com.qbe.cotizador.model.PuntoVenta;
import com.qbe.cotizador.model.TipoDireccion;
import com.qbe.cotizador.model.TipoVariable;
import com.qbe.cotizador.model.UnidadNegocio;
import com.qbe.cotizador.model.UsuariosOffline;
import com.qbe.cotizador.model.VariableSistema;
import com.qbe.cotizador.model.Zona;
import com.qbe.cotizador.transaction.cotizacion.CotizacionRespuestaTransaction;
import com.qbe.cotizador.transaction.cotizacion.CotizacionTransaction;
import com.qbe.cotizador.transaction.cotizacion.EndosoBeneficiarioTransaction;
import com.qbe.cotizador.transaction.entidad.DireccionTransaction;
import com.qbe.cotizador.transaction.entidad.EntidadTransaction;
import com.qbe.cotizador.transaction.producto.agricola.AgriAuditoriaCotizacionTransaction;
import com.qbe.cotizador.transaction.producto.agricola.AgriObjetoCotizacionTransaction;
import com.qbe.cotizador.transaction.producto.agricola.AgriSucreAuditoriaTransaction;
import com.qbe.cotizador.util.Utilitarios;
import com.qbe.ensurance.services.WSActualizarCrearEntidadesONBASE.WSActualizarCrearEntidadesONBASEProxy;
import com.tandi.entidad.dto.EntidadWSONBASE;
import com.tandi.servicios.agricola.WSEmisionAgricolaProxy;

public class AgriEmisionPoliza {
	public static AgriResultadoEmision emitirPoliza(String cotizacionId) throws Exception{
		CotizacionDAO cotizacionDAO=new CotizacionDAO(); 
		Cotizacion cotizacion=cotizacionDAO.buscarPorId(cotizacionId);

		// Actualizar las direcciones de la entidad cliente
		ClienteDAO clienteDAO = new ClienteDAO();
		Cliente cliente = clienteDAO.buscarPorId(cotizacion.getClienteId().toString());

		int Contadordirecciones=cotizacion.getAsegurado().getDireccions().size() ;
		
		if (Contadordirecciones==0 ) {
			AgriObjetoCotizacionDAO objCotDAO = new AgriObjetoCotizacionDAO();
			AgriObjetoCotizacion objetoCot = new AgriObjetoCotizacion();
			// if (!cotizacionId.equals(""))
			List<CotizacionDetalle> detalle = cotizacion.getCotizacionDetalles();
			objetoCot = objCotDAO.buscarPorId(new BigInteger(detalle.get(0).getObjetoId()));
			CantonDAO cantDAO = new CantonDAO();
			Canton canton = cantDAO.buscarPorId(objetoCot.getCantonId().toString());
			CiudadDAO ciuDAO = new CiudadDAO();
			Ciudad ciu = ciuDAO.buscarPorNombre(canton.getNombre());
			if (ciu==null){
				//ProvinciaDAO provDAO = new ProvinciaDAO();
				//Provincia prov = provDAO.buscarPorId(canton.getProvincia().getId());
				ciu = ciuDAO.buscarPorId(canton.getProvincia().getCapitalId());
			}
			TipoDireccionDAO tipoDirecDAO = new TipoDireccionDAO();
			ZonaDAO zonaDAO = new ZonaDAO();
			// Por defecto Tipo de direccion (cobro)
			TipoDireccion tipoDirec = tipoDirecDAO.buscarPorId("3");
			// Por defecto zona rural
			Zona zona = zonaDAO.buscarPorId("2");
			DireccionTransaction direcTransaccion = new DireccionTransaction();
			Direccion nuevaDireccion = new Direccion();
			nuevaDireccion.setCiudad(ciu);
			nuevaDireccion.setEntidad(cliente.getEntidad());
			nuevaDireccion.setTipoDireccion(tipoDirec);
			nuevaDireccion.setZona(zona);
			nuevaDireccion.setCallePrincipal(objetoCot.getDireccionSiembra());
			nuevaDireccion.setNumero("S/N");
			nuevaDireccion.setEsCobro(true);
			nuevaDireccion.setCalleSecundaria(objetoCot.getDireccionSiembra());
			nuevaDireccion = direcTransaccion.crear(nuevaDireccion);
			// }
		}
		else{
			AgriObjetoCotizacionDAO objCotDAO = new AgriObjetoCotizacionDAO();
			AgriObjetoCotizacion objetoCot = new AgriObjetoCotizacion();
			// if (!cotizacionId.equals(""))
			List<CotizacionDetalle> detalle = cotizacion.getCotizacionDetalles();
			objetoCot = objCotDAO.buscarPorId(new BigInteger(detalle.get(0).getObjetoId()));
			CantonDAO cantDAO = new CantonDAO();
			Canton canton = cantDAO.buscarPorId(objetoCot.getCantonId().toString());
			CiudadDAO ciuDAO = new CiudadDAO();
			Ciudad ciu = ciuDAO.buscarPorNombre(canton.getNombre());
			if (ciu==null){
				//ProvinciaDAO provDAO = new ProvinciaDAO();
				//Provincia prov = provDAO.buscarPorId(canton.getProvincia().getId());
				ciu = ciuDAO.buscarPorId(canton.getProvincia().getCapitalId());
			}
			TipoDireccionDAO tipoDirecDAO = new TipoDireccionDAO();
			ZonaDAO zonaDAO = new ZonaDAO();
			// Por defecto Tipo de direccion (cobro)
			TipoDireccion tipoDirec = tipoDirecDAO.buscarPorId("3");
			// Por defecto zona rural
			Zona zona = zonaDAO.buscarPorId("2");
			DireccionTransaction direcTransaccion = new DireccionTransaction();
			Direccion nuevaDireccion = new Direccion();
			nuevaDireccion.setCiudad(ciu);
			nuevaDireccion.setEntidad(cliente.getEntidad());
			nuevaDireccion.setTipoDireccion(tipoDirec);
			nuevaDireccion.setZona(zona);
			nuevaDireccion.setCallePrincipal(objetoCot.getDireccionSiembra());
			nuevaDireccion.setNumero("S/N");
			nuevaDireccion.setEsCobro(true);
			nuevaDireccion.setCalleSecundaria(objetoCot.getDireccionSiembra());
			nuevaDireccion = direcTransaccion.editar(nuevaDireccion);
		}
		
		//Creo la entidad en ensurance y actualizo el id en la entidad del cotizador
		String resultadoCrearEntidad=crearActualizarEntidad(cotizacion.getAsegurado());
		if(!resultadoCrearEntidad.equals("")){
			Entidad entidad=cotizacion.getAsegurado();
			entidad.setEntEnsurance(resultadoCrearEntidad);
			EntidadTransaction entidadTrans=new EntidadTransaction();
			entidadTrans.editar(entidad);
		}
		
			
		AgriResultadoEmision nuevoResultado=new AgriResultadoEmision();
		if(cotizacion.getId()!=null){
			AgriSucreAuditoria agriSucreAuditoria = new AgriSucreAuditoria();
			agriSucreAuditoria.setCanal("EMISION");
			agriSucreAuditoria.setTramite(cotizacion.getNumeroTramite());
			Date fechaActual = new Date();
			agriSucreAuditoria.setFecha(fechaActual);
			agriSucreAuditoria.setEstado("Correcto");
			//Ensamblo el xml para el envió a generrar la póliza
			nuevoResultado=generarXML(cotizacion);
			if(nuevoResultado.isGeneradoXMLCorrectamente())
			{
				
				
				
				try{
										
					WSEmisionAgricolaProxy emisionAgricola=new WSEmisionAgricolaProxy();
					String resultado=emisionAgricola.emisionPoliza(nuevoResultado.getXmlEmision(), "f2rtiUdv2kjOgaCx");
					
					agriSucreAuditoria.setObjeto(resultado);
					AgriSucreAuditoriaTransaction agriSucreAuditoriaTransaction= new AgriSucreAuditoriaTransaction();
					agriSucreAuditoriaTransaction.crear(agriSucreAuditoria);
					
					if(!resultado.equals("")){
						if (!resultado.contains("ERROR")&& !resultado.contains("Exception") ){
							
							try{
								CotizacionTransaction cotizacionTransaction = new CotizacionTransaction();
								//formato esperado 11014757286001|001-003-003708513::2016-07-28 16:33:52.0
	
								String[] ids=resultado.split(" ");//separamos las fechas
								if(ids.length!=0){
									String[] ids2=ids[0].split("::");
									if(ids2.length!=0){
										String [] factura = ids2[0].replace("|"," ").split(" ");
										CotizacionRespuesta cotizacionRes = new CotizacionRespuesta();
										CotizacionRespuestaTransaction cotiResTransaction = new CotizacionRespuestaTransaction();
										EstadoDAO estadoDAO = new EstadoDAO();
										
										//si ensurance me devuelve el caracter ya esta emitida
										//formato correcto
										//11009488060525|001-003-003698285::2016-07-21 09:43:02.0
										//formato de ya emitida
										//1 |001-003-003698285::2016-07-21 09:43:02.0
	
										if(factura[0].trim().equals("EXISTE"))
											throw new Exception("EXISTE Poliza  emitida Anteriormente");
										
										Estado estado = estadoDAO.buscarPorNombre("Emitido", "Cotizacion");
										if (!cotizacion.getEstado().getNombre().equals(estado.getId())){
											System.out.println("factura[0] :"+factura[0].trim()+ " factura[1] :"+factura[1].trim());
											cotizacion.setNumeroFactura(factura[1].trim());
											nuevoResultado.setFactura(factura[1].trim());
											cotizacion.setEstado(estado);
											///TODO:tualiza estado tabla cotizacion
											cotizacion = cotizacionTransaction.editar(cotizacion);
											
											//guardamos los otros datos de la factura
											CotizacionDetalleDAO cotizacionDetalleDAO = new CotizacionDetalleDAO();
											CotizacionDetalle cotizacionDetalle= new CotizacionDetalle();
											
											cotizacionDetalle=cotizacionDetalleDAO.buscarCotizacionDetallePorCotizacion(cotizacion).get(0);
											
											AgriObjetoCotizacionDAO agriObjetoCotizacionDAO= new AgriObjetoCotizacionDAO();
											AgriObjetoCotizacion agriObjetoCotizacion = agriObjetoCotizacionDAO.buscarPorId(new BigInteger(cotizacionDetalle.getObjetoId()));
											
											agriObjetoCotizacion.setPolizaNumero("ID:"+factura[0].trim()+ " factura N.-:"+factura[1].trim());
											try{
												String fechaEnsurance=ids2[1].trim();
												SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
												Date date = formatter.parse(fechaEnsurance);
												agriObjetoCotizacion.setPolizaFechaVencimiento(date);
											}catch(Exception e){
												System.out.println("no se pudo guardar la fecha de ensurance");
											}
											
											AgriObjetoCotizacionTransaction agriObjetoCotizacionTransaction = new AgriObjetoCotizacionTransaction();
											agriObjetoCotizacionTransaction.editar(agriObjetoCotizacion);
											
											
											/**PROCESO DE CREACION DEL DETALLE DE LA COTIZACION ENDOSO***/
											AgriCotizacionDetalleProcesos agriCotizacionDetalleProcesos = new AgriCotizacionDetalleProcesos();
											agriCotizacionDetalleProcesos.creardetalleCotizacion(cotizacion, "Emision");
											/**FIN DE REGISTRO DE ENDOSO**/
											
											//TODO: Se graba en cotizacion respuesta 
											cotizacionRes.setCotizacionId(new BigInteger(cotizacion.getId()));
											cotizacionRes.setPolizaId(factura[0]);
											cotizacionRes.setFacturaNumero(cotizacion.getNumeroFactura());
											cotizacionRes.setFechaEmision(ids2[1].trim());
											cotizacionRes = cotiResTransaction.crear(cotizacionRes);
											nuevoResultado.setEmitidoCorrectamente(true);
											return nuevoResultado;
										}
										else {
											nuevoResultado.setEmitidoCorrectamente(false);
											nuevoResultado.setMensaje("La cotización fue emitida anteriormente");
											return nuevoResultado;
										}
									}
								}
							}catch (Exception e) {
								e.printStackTrace();
								nuevoResultado.setEmitidoCorrectamente(false);
								nuevoResultado.setMensaje(" Error al leer respuesta de ensurance "+e.getMessage());
								return nuevoResultado;
							}
						}
						else {
							if (resultado.contains("EXISTE")){
								nuevoResultado.setEmitidoCorrectamente(false);
								nuevoResultado.setMensaje("Cotizacion Emitida Anteriormente");
								return nuevoResultado;
							}
							else{
								nuevoResultado.setEmitidoCorrectamente(false);
								nuevoResultado.setMensaje("Error en el proceso de emisión de Ensurance. "+resultado);
								return nuevoResultado;
							}
						}
					}
					else{
						
							nuevoResultado.setEmitidoCorrectamente(false);
							nuevoResultado.setMensaje("Error en el proceso de emisión de Ensurance");
							return nuevoResultado;
						
					}
						
				}
				catch(Exception ex){
					
					if(ex.getMessage().contains("EXISTE")){
						nuevoResultado.setEmitidoCorrectamente(false);
						nuevoResultado.setMensaje("Cotizacion Emitida Anteriormente");
						ex.printStackTrace();
						return nuevoResultado;
					}else{
						ex.printStackTrace();
						nuevoResultado.setEmitidoCorrectamente(false);
						nuevoResultado.setMensaje("Error en el proceso de emisión de Ensurance"+ ex.getMessage());
						return nuevoResultado;
					}
				}
			}
			else
				return nuevoResultado;
		}
		else
		{
			nuevoResultado.setEmitidoCorrectamente(false);
			nuevoResultado.setMensaje("No existe una cotización con ese numero");
			return nuevoResultado;
		}
		return nuevoResultado;
	}

	private static String crearActualizarEntidad(Entidad entidad) throws Exception{
		String variableControl="";
		String ciudad="";
		String direccion="";
		String provincia="";
		
		AgriSucreAuditoria auditoria = new AgriSucreAuditoria();
		
		auditoria.setTramite(""+entidad.getIdentificacion());
		java.util.Date date2= new java.util.Date();
		java.sql.Timestamp sq2 = new java.sql.Timestamp(date2.getTime());
		auditoria.setFecha(sq2);
		auditoria.setCanal("EMISION");
		AgriSucreAuditoriaTransaction procesoAuditoria= new AgriSucreAuditoriaTransaction();
		
		
		if(entidad.getDireccions().size()!=0){
			if (entidad.getDireccions().get(0).getCiudad()!=null){
				ciudad=entidad.getDireccions().get(0).getCiudad().getId();
				provincia=entidad.getDireccions().get(0).getCiudad().getProvincia().getId();
				direccion= entidad.getDireccions().get(0).getCiudad().getProvincia().getNombre()+"/"+ entidad.getDireccions().get(0).getCiudad().getNombre();
			}
		}
		
		if(direccion.trim().equals("")){
			direccion="Pichincha/Quito";
			provincia="17";
			ciudad="1201001";
		}

		Date fecha=new Date();
		com.qbe.ensurance.services.WSActualizarCrearEntidadesONBASE.WSActualizarCrearEntidadesONBASEProxy wsEntidadEnsurance=new WSActualizarCrearEntidadesONBASEProxy();
		EntidadWSONBASE entidadEnsurance=new EntidadWSONBASE();
		try{
		if(entidad.getApellidos()==null){
			entidadEnsurance.setApellido(" ");
			variableControl=variableControl+"Apellido: ";
		}else{
			entidadEnsurance.setApellido(entidad.getApellidos());
			variableControl=variableControl+"Apellido: "+entidad.getApellidos();
		}
		entidadEnsurance.setActividadEconomica("-1");
		variableControl=variableControl+" setActividadEconomica: -1 ";
		entidadEnsurance.setApellidoRepresentanteLegal(entidad.getApellidos());
		variableControl=variableControl+" setApellidoRepresentanteLegal: "+entidad.getApellidos();
		entidadEnsurance.setCiudad(ciudad);
		variableControl=variableControl+" setCiudad: "+ciudad;
		entidadEnsurance.setConoceTuCliente("");
		variableControl=variableControl+" setConoceTuCliente: ";
		try{
			entidadEnsurance.setEmailPrincipal(entidad.getMail());
			variableControl=variableControl+" setEmailPrincipal: "+entidad.getMail();
		}catch(Exception e){
			System.out.println("No se encontro el correo electronico");
			variableControl=variableControl+" setEmailPrincipal: "+"No se encontro el correo electronico";
		}
		entidadEnsurance.setEntidadId("no");
		variableControl=variableControl+" setEntidadId: ";
		entidadEnsurance.setEstadoCivilId("29");
		variableControl=variableControl+" setEstadoCivilId: 29";
		entidadEnsurance.setFechaActualiza(fecha.toLocaleString());
		variableControl=variableControl+" setFechaActualiza: "+fecha.toLocaleString();
		entidadEnsurance.setFechaConstitucion(null);
		variableControl=variableControl+" setFechaConstitucion: null";
		entidadEnsurance.setFechaNacimiento("01/01/1990");
		variableControl=variableControl+" setFechaNacimiento: 01/01/1990";
		entidadEnsurance.setGenero("M");
		variableControl=variableControl+" setGenero: M";
		entidadEnsurance.setIdentificacion(entidad.getIdentificacion().trim());
		variableControl=variableControl+" setIdentificacion: "+entidad.getIdentificacion().trim();
		entidadEnsurance.setNombre(entidad.getNombres());
		variableControl=variableControl+" setNombre: "+entidad.getNombres();
		entidadEnsurance.setNombrecompleto(entidad.getNombreCompleto());
		variableControl=variableControl+" setNombrecompleto: "+entidad.getNombreCompleto();
		entidadEnsurance.setNombreDireccion(direccion.trim());
		variableControl=variableControl+" setNombreDireccion: "+direccion.trim();
		entidadEnsurance.setNombreRepresentanteLegal(entidad.getNombres());
		variableControl=variableControl+" setNombreRepresentanteLegal: "+entidad.getNombres();
		entidadEnsurance.setPais("6815744");
		variableControl=variableControl+" setPais: 6815744 ";
		try{
			entidadEnsurance.setProvincia(provincia);
			variableControl=variableControl+" setProvincia: "+provincia;
		}catch(Exception e){
			System.out.println("No se encontro la provincia");
		}
		
		entidadEnsurance.setTelefonoCelular1(entidad.getCelular());
		variableControl=variableControl+" setTelefonoCelular1: "+entidad.getCelular();
		entidadEnsurance.setTelefonoConvencional(entidad.getTelefono());
		variableControl=variableControl+" setTelefonoConvencional: "+entidad.getTelefono();
		entidadEnsurance.setTelefonoOtro(null);
		variableControl=variableControl+" setTelefonoOtro: null";
		entidadEnsurance.setTipoEmpleado("INDEPENDIENTE");
		variableControl=variableControl+" setTipoEmpleado: INDEPENDIENTE ";
		entidadEnsurance.setTitulo("");
		variableControl=variableControl+" setTitulo: ";
		entidadEnsurance.setTipoCliente("PERSONA NATURAL");
		variableControl=variableControl+" setTipoCliente: PERSONA NATURAL ";
		entidadEnsurance.setPuerto("8084");
		variableControl=variableControl+" setPuerto: 8084 ";
		
		//tomamos los valores desde variables del sistema
		
		VariableSistemaDAO vsDAO=new VariableSistemaDAO();
	    VariableSistema  vs=vsDAO.buscarPorNombre("USUARIO_EMI_AGRICOLA");
	    entidadEnsurance.setUsuario(vs.getValor());	    
		variableControl=variableControl+" setUsuario:" +vs.getValor();
		
		vs=vsDAO.buscarPorNombre("CONTRASENIA_EMI_AGRICOLA");
		entidadEnsurance.setPassword(vs.getValor());
		variableControl=variableControl+" setPassword: "+vs.getValor();
		
		auditoria.setEstado("OK");
		variableControl=variableControl+" ||||| OBJETO ";
		auditoria.setObjeto(variableControl);
		procesoAuditoria.crear(auditoria);
		
		}catch(Exception ex){
			ex.printStackTrace();
			throw new Exception("Uno de los parametros del cliente no es correcto "+ex.getMessage());
		}
		String result="";
		try
		{
			result=wsEntidadEnsurance.crearActualizarEntidad(entidadEnsurance);
			auditoria.setEstado("OK");
			variableControl=variableControl+" ||||| RESPUESTA ENSURANCE: result "+result;
			auditoria.setObjeto(variableControl);
			procesoAuditoria.crear(auditoria);
		}
		catch(Exception ex){
			auditoria.setEstado("ERROR");
			variableControl=variableControl+"||Error: "+ex.getMessage();
			ex.printStackTrace();
			variableControl=variableControl+" ||||| RESPUESTA ENSURANCE: result "+result;
			auditoria.setObjeto(variableControl);
			procesoAuditoria.crear(auditoria);
			throw new Exception("Error al crear la entidad ensurance");
			
		}
		
		return result;
	}
	
	private static AgriResultadoEmision generarXML(Cotizacion cotizacion){
		AgriResultadoEmision resultado=new AgriResultadoEmision();
		AgriSucreAuditoria agriSucreAuditoria = new AgriSucreAuditoria();
		try{
		if(cotizacion.getAsegurado()==null)
		{
			resultado.setGeneradoXMLCorrectamente(false);
			resultado.setMensaje("La cotización no tiene un asegurado");
			return resultado;
		}
		ClienteDAO clienteDAO=new ClienteDAO();
		AgenteDAO agenteDAO=new AgenteDAO();
		AgriParametroXPuntoVentaDAO parametroDAO=new AgriParametroXPuntoVentaDAO();
		PuntoVentaDAO puntoVentaDAO=new PuntoVentaDAO();
		ProductoXPuntoVentaDAO productoXPVDAO=new ProductoXPuntoVentaDAO();
		AgriObjetoCotizacionDAO objetoCotizacionDAO=new AgriObjetoCotizacionDAO();
		AgriTipoCultivoDAO tipoCultivoDAO=new AgriTipoCultivoDAO();
		EntidadDAO entidadDAO=new EntidadDAO();
		EndosoBeneficiarioDAO endosoBeneficiarioDAO=new EndosoBeneficiarioDAO();

		Agente agente=agenteDAO.buscarPorId(cotizacion.getAgenteId().toString());
		AgriParametroXPuntoVenta parametroXPV=parametroDAO.buscarPorPuntoVentaId(new BigInteger(cotizacion.getPuntoVenta().getId()));
		PuntoVenta puntoVenta=puntoVentaDAO.buscarPorId(cotizacion.getPuntoVenta().getId());
		ProductoXPuntoVenta productoXPV=productoXPVDAO.buscarPorId(cotizacion.getProductoXPuntoVentaId().toString());
		CotizacionDetalle cotizacionDetalle = new CotizacionDetalle();
		CotizacionDetalleDAO cotizacionDetalleDAO= new CotizacionDetalleDAO();
		cotizacionDetalle=cotizacionDetalleDAO.buscarCotizacionDetallePorCotizacion(cotizacion).get(0);
		AgriObjetoCotizacion objetoCotizacion=objetoCotizacionDAO.buscarPorId(new BigInteger(cotizacionDetalle.getObjetoId()));
		AgriTipoCultivo tipoCultivo=tipoCultivoDAO.BuscarPorId(objetoCotizacion.getTipoCultivoId());
		Cliente cliente=clienteDAO.buscarPorId(cotizacion.getClienteId().toString());
		
		String zonaAfectada="0";
		Provincia  provincia = new Provincia();
		ProvinciaDAO provinciaDAO= new ProvinciaDAO();
		provincia= provinciaDAO.buscarPorId(objetoCotizacion.getProvinciaId().toString());
		if(provincia.getNombre().trim().equals("MANABI")||provincia.getNombre().trim().equals("ESMERALDAS")){
			int canal=Integer.parseInt(parametroXPV.getCanalId().toString());
			if(canal==1)
				zonaAfectada="0";
			else
				zonaAfectada="1";	
		}
		//Valido que existe un tipo de cultivo
		if(tipoCultivo.getTipoCultivoId()==null){
			resultado.setGeneradoXMLCorrectamente(false);
			resultado.setMensaje("No existe el tipo de cultivo indicado en la cotización");
			return resultado;
		}
		else{
			if(tipoCultivo.getCodEnsurance().equals("") || tipoCultivo.getCodEnsurance()==null){
				resultado.setGeneradoXMLCorrectamente(false);
				resultado.setMensaje("El tipo de cultivo no tiene un código válido en Ensurance");
				return resultado;
			}
		}
		
		//Determino la plantilla
		String plantillaId="";
		String contenedorId="";
		String sucursalId="";
		if(parametroXPV.getCanalId()!=null)
		{
			AgriCanalDAO agriCanalDAO=new AgriCanalDAO();
			AgriCanal agriCanal=agriCanalDAO.BuscarPorId(parametroXPV.getCanalId());
//			if(agriCanal.getNombre().equals("DIRECTOS")){
//				//contenedorId="";
//				//TODO: En la ultima reunion se quedo que en directos si iba a tener un contenedor
//				contenedorId=parametroXPV.getContenedorEnsuranceId();
//			}
//			else{
//				contenedorId=parametroXPV.getContenedorEnsuranceId();
//			}
				
			
			AgriParametroXCanalDAO apcDAO=new AgriParametroXCanalDAO();
			
			AgriParametroXCanal parametroXCanal = apcDAO.obtenerPorCanalTipoCultivo(parametroXPV.getPuntoVentaId(), tipoCultivo.getTipoCultivoId());
			if(parametroXCanal.getParametroCanalId()!=null){
				if(parametroXCanal.getPlantillaId()!=null){
					plantillaId=parametroXCanal.getPlantillaId();
					contenedorId=parametroXCanal.getContenedorEnsuranceId();
					
				}
				else{
					resultado.setGeneradoXMLCorrectamente(false);
					resultado.setMensaje("No existe configurado una plantilla para este canal.");
					return resultado;
				}
					
			}
			else{
				resultado.setGeneradoXMLCorrectamente(false);
				resultado.setMensaje("No existe la configuración de paramateros para este canal.");
				return resultado;
			}
				
		}
		else{
			resultado.setGeneradoXMLCorrectamente(false);
			resultado.setMensaje("No existe la configuración de paramateros para este canal.");
			return resultado;
		}
		
		
		EndosoBeneficiario endosoBeneficiario = endosoBeneficiarioDAO.buscarPorCotizacion(cotizacion);
		
			if (endosoBeneficiario == null){
				endosoBeneficiario = new EndosoBeneficiario();
				//TODO:COntrolar que el ensodoso beneficiario se cree solo para banca comunal y credife 
				EndosoBeneficiarioTransaction endosoBeneficiarioTransaction = new EndosoBeneficiarioTransaction();
				BeneficiarioDAO beneficiarioDAO = new BeneficiarioDAO();
				Beneficiario beneficiario = beneficiarioDAO.buscarPorId(parametroXPV.getBeneficiarioId());
				endosoBeneficiario.setBeneficiario(beneficiario);
				endosoBeneficiario.setCotizacion(cotizacion);
				endosoBeneficiario.setMonto(cotizacion.getSumaAseguradaTotal());
				endosoBeneficiario=endosoBeneficiarioTransaction.crear(endosoBeneficiario);
			}
		
			
		//CREACION DE LA DIRECCION
			
		//Proceso de Auditoria	
		
			
	    AgriAuditoriaCotizacion  agriAuditoriaCotizacion = new AgriAuditoriaCotizacion();
	    AgriAuditoriaCotizacionDAO agriAuditoriaCotizacionDAO = new AgriAuditoriaCotizacionDAO();
	    agriAuditoriaCotizacion = agriAuditoriaCotizacionDAO.BuscarPorCotizacinId(new BigInteger(cotizacion.getId()));
		Calendar c = Calendar.getInstance(); ;
		c.setTime(objetoCotizacion.getFechaSiembra()); 
		c.add(Calendar.DATE, tipoCultivo.getVigenciaDias());
		Date vigenciaHasta = c.getTime();
		
		Calendar cPol = Calendar.getInstance(); 
		cPol.setTime(agriAuditoriaCotizacion.getFecha()); 
		cPol.add(Calendar.DATE, tipoCultivo.getVigenciaDias());
		Date vigenciaPolHasta = cPol.getTime();
		CotizacionTransaction  cotizacionTransaction = new CotizacionTransaction();
		
		cotizacion.setVigenciaDesde(agriAuditoriaCotizacion.getFecha());
		cotizacionTransaction.editar(cotizacion);
		
		
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		
		String fechaInicioCultivo = df.format(objetoCotizacion.getFechaSiembra());
		
		String fechaFinalCultivo = df.format(vigenciaHasta);
		
		long fechaInicioPoliza = cotizacion.getVigenciaDesde().getTime()/1000;
		
		long fechaFinalPoliza = vigenciaPolHasta.getTime()/1000;
		/*Date fechaAprobacion=new Date();
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		try{
			fechaAprobacion=dateFormat.parse(fechaInicioVigencia);
		} catch (ParseException e) {
			e.printStackTrace();
			.append("<puerto>8084</puerto>")
		}*/
		
		
		/*PARA EL ENVIO DE LOS EMAIL*/
		/*PROCESO DE CALCULO DE COMPONENTES*/
		TipoVariableDAO tipoVariableDao = new TipoVariableDAO();
        TipoVariable tipoVariable = tipoVariableDao.buscarPorId("3");
        VariableSistemaDAO variableDAO= new VariableSistemaDAO();
        List<VariableSistema> variablesistema = variableDAO.buscarTipoVariable(tipoVariable);
        String CorreoElectronico="";
        String variableS="";
        if(parametroXPV.getCanalId().toString().equals("2")){
        	variableS="CORREO_PRONACA";
        }
        if(parametroXPV.getCanalId().toString().equals("5")){
        	variableS="CORREO_COPROGRESO";
        }
        if(parametroXPV.getCanalId().toString().equals("3")){
        	variableS="CORREO_PICHINCHA";
        }
        
        
        String login="";
        String password="";
        String tipoRiesgo="";
        String claseRiesgo="";
        String tipoItem="";
        if(variablesistema.size() > 0) {
        	for(VariableSistema variable : variablesistema) {
        		
        		if(variable.getNombre().equals(variableS)){
        			CorreoElectronico=variable.getValor();//%COMISION DE AGENTE
        		}
        		if(variable.getNombre().equals("USUARIO_EMI_AGRICOLA")){
        			login=variable.getValor();//usuario con el que se logue para emision
        		}
        		if(variable.getNombre().equals("CONTRASENIA_EMI_AGRICOLA")){
        			password=variable.getValor();//contrasenia con la que se loguea para la emision
        		}
        		if(variable.getNombre().equals("TIPO_RIESGO_AGRICOLA")){
        			tipoRiesgo=variable.getValor();//TIPO_RIESGO_AGRICOLA para la emision
        		}
        		if(variable.getNombre().equals("CLASE_RIESGO_AGRICOLA")){
        			claseRiesgo=variable.getValor();//CLASE_RIESGO_AGRICOLA para la emision
        		}
        		if(variable.getNombre().equals("TIPO_ITEM_AGRICOLA")){
        			tipoItem=variable.getValor();//TIPO_ITEM_AGRICOLA para la emision
        		}
        	}
        }
        String agricultorTecnificado="";
        
        if(objetoCotizacion.getAgricultorTecnificado()){
        	agricultorTecnificado="Si";
        }else{
        	agricultorTecnificado="No";
        }
		
        //Encontramos la unidad de negocio
        String unidadNegocio="";
        
        if(puntoVenta.getNombre().equals("COOPROGRESO")){
        	//TODO: OJO SOLO COOPROGRESO Peticion david garzon para distingir entre masivos y agricola ganadero
        	//encontramos el usuario que relizo la cotizacion.
        	String nombreEjecutivo=objetoCotizacion.getUsuarioOffline();
        	UsuariosOffline usuariosOffline = new UsuariosOffline();
    		UsuariosOfflineDAO usuariosOfflineDAO = new UsuariosOfflineDAO();
    		usuariosOffline=usuariosOfflineDAO.BuscarNombre(nombreEjecutivo);
    		
    		//Tomamos la unidad de negocio
    		UnidadNegocioDAO unidadNegocioDAO = new UnidadNegocioDAO();
    		UnidadNegocio negocio=unidadNegocioDAO.buscarPorId(usuariosOffline.getUnidadNegocio());
    		unidadNegocio=negocio.getUnEnsurance();
    		
        }else{
        	//TODO: Para canales sucre, banca comunal, Pronaca todo se emite como agricola ganadero
        	unidadNegocio=productoXPV.getUnidadNegocio().getUnEnsurance();
        }
                
        
		StringBuilder xml=new StringBuilder("<superObjetoXML><detallesPoliza><identificador>").append(cotizacion.getId()).append("</identificador>")
		.append("<login>").append(login).append("</login>")
		.append("<pass>").append(password).append("</pass>")
		.append("<agenteId>").append(agente.getAgeEnsurance()).append("</agenteId>")
		.append("<porcentajeComision>").append(cotizacion.getPorcentajeComision()).append("</porcentajeComision>")
		.append("<valorprima>").append(cotizacion.getPrimaNetaTotal()).append("</valorprima>")
		.append("<canalId>").append(parametroXPV.getCanalId()).append("</canalId>")
		.append("<contenedorId>").append(contenedorId).append("</contenedorId>")
		//ensurance solo acepta lote de maximo 40 caracteres
		.append("<loteImpresion>").append((puntoVenta.getNombre())).append("</loteImpresion>")
		.append("<puntoVentaId>")
		.append(puntoVenta.getPtoEnsurance())
		.append("</puntoVentaId>")
		.append("<tipoRiesgoId>").append(tipoRiesgo).append("</tipoRiesgoId>")
		.append("<claseRiesgoId>").append(claseRiesgo).append("</claseRiesgoId>")
		.append("<tipoItemId>").append(tipoItem).append("</tipoItemId>")
		.append("<monedaId>11141120</monedaId>")
		.append("<plantillaId>").append(plantillaId).append("</plantillaId>")
		.append("<firmaDigitalId>1</firmaDigitalId>")
		.append("<usuarioActualiza>10822106152960</usuarioActualiza>")
		.append("<ramoId>7274513</ramoId>")
		.append("<mnemotecnicoRamo>SA</mnemotecnicoRamo>")
		.append("<unidadNegocioId>").append(unidadNegocio).append("</unidadNegocioId>")
		.append("<unidadProduccionId>").append(productoXPV.getUnidadProduccion().getUpEnsurance()).append("</unidadProduccionId>")
		//NUMERO DE COTIZACION 2
		.append("<numeroPoliza>").append(objetoCotizacion.getIdCotizacion2()).append("</numeroPoliza>")
		.append("<codigoIntegracion>998000008</codigoIntegracion>")
		.append("<fechaAprobacion>").append(Utilitarios.actualDate()).append("</fechaAprobacion>");
		if(endosoBeneficiario!=null){
			Entidad entidadBeneficiario=entidadDAO.buscarEntidadPorIdEnsurance(endosoBeneficiario.getBeneficiario().getCodigoEnsurance().toString());
			    xml.append("<codigoEntidadFinanciera>").append(endosoBeneficiario.getBeneficiario().getCodigoEnsurance().toString()).append("</codigoEntidadFinanciera>");
		}else{
				xml.append("<codigoEntidadFinanciera>0</codigoEntidadFinanciera>");
		}	
		xml.append("<vigenciaDesde>").append(fechaInicioPoliza).append("</vigenciaDesde>")
		.append("<valorAsegurado>").append(cotizacion.getSumaAseguradaTotal()).append("</valorAsegurado>")
		.append("<vigenciaHasta>").append(fechaFinalPoliza).append("</vigenciaHasta>")
		.append("<sucursalId>").append(cotizacion.getPuntoVenta().getSucursal().getSucEnsurance()).append("</sucursalId>")
		.append("<esZonaAfectada>").append(zonaAfectada).append("</esZonaAfectada>")
		.append("</detallesPoliza>")
		.append("<loteCultivo>")
		.append("<loteCultivoId>-1</loteCultivoId>")
		.append("<nombre>").append(puntoVenta.getNombre()).append("</nombre>")
		.append("<valorAsegurado>").append(cotizacion.getSumaAseguradaTotal()).append("</valorAsegurado>")
		.append("<numeroHectareas>").append(objetoCotizacion.getHectareasLote()).append("</numeroHectareas>")
		.append("<valorPorHectarea>").append(objetoCotizacion.getCostoProduccion()).append("</valorPorHectarea>")
		.append("<gpsLoteX>").append(objetoCotizacion.getLatitud()).append("</gpsLoteX>")
		.append("<gpsLoteY>").append(objetoCotizacion.getLongitud()).append("</gpsLoteY>")
		.append("<tasa>").append(cotizacion.getTasaProductoValor()).append("</tasa>")
		.append("<tipoCultivoId>").append(tipoCultivo.getCodEnsurance()).append("</tipoCultivoId>")
		.append("<diasVigencia>").append(tipoCultivo.getVigenciaDias()).append("</diasVigencia>")
		.append("<inicioVigenciaCultivo>").append(fechaInicioCultivo).append("</inicioVigenciaCultivo>")
		.append("<finVigenciaCultivo>").append(fechaFinalCultivo).append("</finVigenciaCultivo>")
		//.append("<inicioVigenciaCultivo>").append("06/11/2015").append("</inicioVigenciaCultivo>")
		//.append("<finVigenciaCultivo>").append("06/02/2016").append("</finVigenciaCultivo>")
		.append("<variedad>").append(objetoCotizacion.getVariedad()).append("</variedad>")
		.append("<numeroHectareasAsegurables>").append(objetoCotizacion.getHectareasAsegurables()).append("</numeroHectareasAsegurables>")
		.append("<esTecnificado>").append(agricultorTecnificado).append("</esTecnificado>")
		//.append("<fechaTentativaSiembra>").append("06/11/2015").append("</fechaTentativaSiembra>")
		.append("<fechaTentativaSiembra>").append(objetoCotizacion.getFechaSiembra()).append("</fechaTentativaSiembra>")
		.append("<propiedadId>-1</propiedadId>")
		.append("</loteCultivo>")

		.append("<cliente>")
		.append("<id>no</id>")
				.append("<entidadId>")
				.append(cliente.getEntidad().getEntEnsurance()==null||cliente.getEntidad().getEntEnsurance().trim().equals("0")?"no":cliente.getEntidad().getEntEnsurance()).append("</entidadId>")
		.append("<nombres>").append(cliente.getEntidad().getNombres()).append("</nombres>")
		.append("<apellidos>").append(cliente.getEntidad().getApellidos()==null?" ":cliente.getEntidad().getApellidos()).append("</apellidos>")
		.append("<tipoIdentificacion>")
		.append(cliente.getEntidad().getTipoIdentificacion().getId().equals("1") ? "c":cliente.getEntidad().getTipoIdentificacion().equals("2") ? "p":"r")
		.append("</tipoIdentificacion>")
		.append("<tipoEntidadId>").append(cliente.getEntidad().getTipoEntidad().getId()).append("</tipoEntidadId>")
		.append("<identificacion>").append(cliente.getEntidad().getIdentificacion()).append("</identificacion>");
		Entidad entidadBeneficiario=entidadDAO.buscarEntidadPorIdEnsurance(endosoBeneficiario.getBeneficiario().getCodigoEnsurance().toString());
		if(!CorreoElectronico.trim().equalsIgnoreCase(""))
			xml.append("<email>").append(CorreoElectronico).append("</email>");
		else
			xml.append("<email>").append(cliente.getEntidad().getMail()).append("</email>");
		xml.append("<genero>f</genero>")
		.append("<esEmpresa>")
		.append(cliente.getEntidad().getTipoIdentificacion().getId().equals("1") ? "false":cliente.getEntidad().getTipoIdentificacion().getId().equals("2") ? "false":cliente.getEntidad().getTipoIdentificacion().getId().equals("3")?"false":"true")
		.append("</esEmpresa>")
		.append("<DireccionDTO><direccion>")
		.append("<paisId>6815744</paisId>")
		
		.append("<provinciaId>").append(cliente.getEntidad().getDireccions().get(0).getCiudad().getProvincia().getCodigoSbs()).append("</provinciaId>")
		.append("<ciudadId>").append(cliente.getEntidad().getDireccions().get(0).getCiudad().getId()).append("</ciudadId>");
		if(cliente.getEntidad().getDireccions().get(0).getParroquia()!=null){
			xml.append("<cantonId>").append(cliente.getEntidad().getDireccions().get(0).getParroquia().getCanton().getId()).append("</cantonId>")
			.append("<parroquiaId>").append(cliente.getEntidad().getDireccions().get(0).getParroquia().getId()).append("</parroquiaId>");
		}
		else{
			xml.append("<cantonId>").append("1201").append("</cantonId>")
			.append("<parroquiaId>").append("120153").append("</parroquiaId>");
		}
		xml.append("<direccion>")
		
		.append(cliente.getEntidad().getDireccions().get(0).getCallePrincipal())
		.append(" ")
		.append(cliente.getEntidad().getDireccions().get(0).getNumero())
		.append(" ")
		.append(cliente.getEntidad().getDireccions().get(0).getCalleSecundaria())
		.append("</direccion>")
		.append("<telefono>").append((cliente.getEntidad().getTelefono()!=null && !cliente.getEntidad().getTelefono().equals("")) ? cliente.getEntidad().getTelefono():"-").append("</telefono>")
		.append("</direccion></DireccionDTO>")
		.append("</cliente>")
		.append("<asegurado>")
		.append("<id>no</id>")
		.append("<entidadId>").append(cotizacion.getAsegurado().getEntEnsurance()).append("</entidadId>")
		.append("<nombres>").append(cotizacion.getAsegurado().getNombres()).append("</nombres>")
		.append("<apellidos>").append(cotizacion.getAsegurado().getApellidos()).append("</apellidos>")
		.append("<tipoIdentificacion>")
		.append(cotizacion.getAsegurado().getTipoIdentificacion().getId()=="1" ? "c":cliente.getEntidad().getTipoIdentificacion().getId()=="2" ? "p":"r")
		.append("</tipoIdentificacion>")
		.append("<tipoEntidadId>").append(cotizacion.getAsegurado().getTipoEntidad().getId()).append("</tipoEntidadId>")
		.append("<identificacion>").append(cotizacion.getAsegurado().getIdentificacion()).append("</identificacion>")
		.append("<genero>f</genero>")
		.append("<esEmpresa>")
		.append(cotizacion.getAsegurado().getTipoIdentificacion().getId()=="1" ? "false":cotizacion.getAsegurado().getTipoIdentificacion().getId()=="2" ? "false":cotizacion.getAsegurado().getTipoIdentificacion().getId()=="3"?"false":"true")
		.append("</esEmpresa>")
		.append("<DireccionDTO><direccion>")
		.append("<paisId>6815744</paisId>")
		.append("<provinciaId>").append(cotizacion.getAsegurado().getDireccions().get(0).getCiudad().getProvincia().getCodigoSbs()).append("</provinciaId>")
		.append("<ciudadId>").append(cotizacion.getAsegurado().getDireccions().get(0).getCiudad().getId()).append("</ciudadId>");
		if(cotizacion.getAsegurado().getDireccions().get(0).getParroquia()!=null){
			xml.append("<cantonId>").append(cotizacion.getAsegurado().getDireccions().get(0).getParroquia().getCanton().getId()).append("</cantonId>")
			.append("<parroquiaId>").append(cotizacion.getAsegurado().getDireccions().get(0).getParroquia().getId()).append("</parroquiaId>");
		}
		else{
			xml.append("<cantonId>").append("1201").append("</cantonId>")
			.append("<parroquiaId>").append("120153").append("</parroquiaId>");
		}

		xml.append("<direccion>")
		.append(cotizacion.getAsegurado().getDireccions().get(0).getCallePrincipal())
		.append(" ")
		.append(cotizacion.getAsegurado().getDireccions().get(0).getNumero())
		.append(" ")
		.append(cotizacion.getAsegurado().getDireccions().get(0).getCalleSecundaria())
		.append("</direccion>")
		.append("<telefono>").append((cotizacion.getAsegurado().getTelefono()!=null && !cotizacion.getAsegurado().getTelefono().equals("")) ? cotizacion.getAsegurado().getTelefono():"-").append("</telefono>")
		.append("</direccion></DireccionDTO>")
		.append("</asegurado>");
		if(endosoBeneficiario!=null){
			entidadBeneficiario=entidadDAO.buscarEntidadPorIdEnsurance(endosoBeneficiario.getBeneficiario().getCodigoEnsurance().toString());
			xml.append("<beneficiarios>")
			.append("<id>no</id>")
			.append("<entidadId>").append(endosoBeneficiario.getBeneficiario().getCodigoEnsurance()).append("</entidadId>")
			.append("<nombres>").append(endosoBeneficiario.getBeneficiario().getNombre()).append("</nombres>")
			.append("<apellidos>").append(endosoBeneficiario.getBeneficiario().getNombre()).append("</apellidos>")
			.append("<tipoIdentificacion>")
			.append(entidadBeneficiario.getTipoIdentificacion().getId()=="1" ? "c":entidadBeneficiario.getTipoIdentificacion().getId()=="2" ? "p":"r")
			.append("</tipoIdentificacion>")
			.append("<tipoEntidadId>").append(entidadBeneficiario.getTipoEntidad().getId()).append("</tipoEntidadId>")
			.append("<identificacion>").append(entidadBeneficiario.getIdentificacion()).append("</identificacion>")
			.append("<esEmpresa>")
			.append(entidadBeneficiario.getTipoIdentificacion().getId()=="1" ? "false":entidadBeneficiario.getTipoIdentificacion().getId()=="2" ? "false":entidadBeneficiario.getTipoIdentificacion().getId()=="3"?"false":"true")
			.append("</esEmpresa>")
			.append("<DireccionDTO>")
			.append("<direccion>")
			.append("<paisId>-1</paisId>")
			.append("<provinciaId>-1</provinciaId>")
			.append("<cantonId>-1</cantonId>")
			.append("<parroquiaId>-1</parroquiaId>")
			.append("<ciudadId>-1</ciudadId>")
			.append("<direccion>-1</direccion>")
			.append("<telefono>-1</telefono>")
			.append("</direccion>")
			.append("</DireccionDTO>")
			.append("</beneficiarios>");
		}
		else{
			xml.append("<beneficiarios>")
			.append("<id>no</id>")
			.append("<entidadId>-1</entidadId>")
			.append("<nombres>-1</nombres>")
			.append("<apellidos>-1</apellidos>")
			.append("<tipoIdentificacion>-1</tipoIdentificacion>")
			.append("<tipoEntidadId>-1</tipoEntidadId>")
			.append("<identificacion>-1</identificacion>")
			.append("<esEmpresa>-1</esEmpresa>")
			.append("<DireccionDTO>")
			.append("<direccion>")
			.append("<paisId>-1</paisId>")
			.append("<provinciaId>-1</provinciaId>")
			.append("<cantonId>-1</cantonId>")
			.append("<parroquiaId>-1</parroquiaId>")
			.append("<ciudadId>-1</ciudadId>")
			.append("<direccion>-1</direccion>")
			.append("<telefono>-1</telefono>")
			.append("</direccion>")
			.append("</DireccionDTO>")
			.append("</beneficiarios>");
		}
		xml.append("</superObjetoXML>");
		
		agriSucreAuditoria.setCanal("EMISION");
		agriSucreAuditoria.setTramite(cotizacion.getNumeroTramite());
		agriSucreAuditoria.setObjeto(xml.toString());
		Date fechaActual = new Date();
		agriSucreAuditoria.setFecha(fechaActual);
		agriSucreAuditoria.setEstado("Correcto");
		AgriSucreAuditoriaTransaction agriSucreAuditoriaTransaction= new AgriSucreAuditoriaTransaction();
		agriSucreAuditoriaTransaction.crear(agriSucreAuditoria);
		
		resultado.setGeneradoXMLCorrectamente(true);
		resultado.setXmlEmision(xml.toString());
		return resultado;
		}
		catch(Exception e){	
			e.printStackTrace();
			resultado.setMensaje("Error: "+e.getMessage());
			agriSucreAuditoria.setCanal("EMISION");
			agriSucreAuditoria.setTramite(cotizacion.getNumeroTramite());
			agriSucreAuditoria.setObjeto("ERROR:"+e.getMessage());
			Date fechaActual = new Date();
			agriSucreAuditoria.setFecha(fechaActual);
			agriSucreAuditoria.setEstado("Correcto");
			AgriSucreAuditoriaTransaction agriSucreAuditoriaTransaction= new AgriSucreAuditoriaTransaction();
			agriSucreAuditoriaTransaction.crear(agriSucreAuditoria);
			return resultado;
		}
	}
}
