package com.qbe.cotizador.dao.producto.agricola;

import java.math.BigInteger;
import java.util.List;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import com.qbe.cotizador.entitymanagerfactory.EntityManagerFactoryDAO;
import com.qbe.cotizador.model.AgriCiclo;
import com.qbe.cotizador.model.UsuariosOffline;

public class UsuariosOfflineDAO extends EntityManagerFactoryDAO<UsuariosOffline> {
	@PersistenceContext(name="CotizadorWebPC", unitName = "CotizadorWebPU" )	
	private EntityManager em;
	
	@Override
	protected EntityManager getEntityManager() {
		if(em == null){
			Context initCtx = null;
			try {
				initCtx = new InitialContext();
				em = (javax.persistence.EntityManager) initCtx.lookup("java:comp/env/CotizadorWebPC");
			} catch (NamingException e) { 
				e.printStackTrace();
			}		
		}
		return em;
	}
	public UsuariosOfflineDAO (){
		super(UsuariosOffline.class);
	}
	
	public UsuariosOffline BuscarPorId(BigInteger id)
	{
		UsuariosOffline usuarioOffline = new UsuariosOffline();
		List<UsuariosOffline> result = getEntityManager().createNamedQuery("UsuariosOffline.buscarPorId").setParameter("id", id).getResultList();
		if (result.size()>0)
			usuarioOffline=result.get(0);
		return usuarioOffline;
	}
	
	public  UsuariosOffline BuscarUsuario(String usuario, String clave)
	{
		UsuariosOffline usuarioOffline = new UsuariosOffline();
		List<UsuariosOffline> result = getEntityManager().createNamedQuery("UsuariosOffline.buscarUsuario").setParameter("usuario", usuario).setParameter("clave", clave).getResultList();
		if (result.size()>0)
			usuarioOffline=result.get(0);
		return usuarioOffline;
	}
	
	public  List<UsuariosOffline> BuscarTodos()
	{
		UsuariosOffline usuarioOffline = new UsuariosOffline();
		List<UsuariosOffline> result = getEntityManager().createNamedQuery("UsuariosOffline.buscarTodos").getResultList();
		return result;
	}
	
	public  UsuariosOffline BuscarNombre(String nombres)
	{
		UsuariosOffline usuarioOffline = new UsuariosOffline();
		List<UsuariosOffline> result = getEntityManager().createNamedQuery("UsuariosOffline.buscarNombre").setParameter("nombres", nombres).getResultList();
		if (result.size()>0)
			usuarioOffline=result.get(0);
		return usuarioOffline;
	}
}
