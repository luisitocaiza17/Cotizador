package com.qbe.cotizador.servlets.producto.agricola;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.List;

import com.qbe.cotizador.dao.cotizacion.EndosoBeneficiarioDAO;
import com.qbe.cotizador.dao.cotizacion.EstadoDAO;
import com.qbe.cotizador.dao.cotizacion.ProductoXPuntoVentaDAO;
import com.qbe.cotizador.dao.cotizacion.TipoObjetoDAO;
import com.qbe.cotizador.dao.cotizacion.VigenciaPolizaDAO;
import com.qbe.cotizador.dao.entidad.ActividadEconomicaDAO;
import com.qbe.cotizador.dao.entidad.BeneficiarioDAO;
import com.qbe.cotizador.dao.entidad.ClienteDAO;
import com.qbe.cotizador.dao.entidad.EntidadDAO;
import com.qbe.cotizador.dao.entidad.PuntoVentaDAO;
import com.qbe.cotizador.dao.entidad.TipoEntidadDAO;
import com.qbe.cotizador.dao.entidad.TipoIdentificacionDAO;
import com.qbe.cotizador.dao.entidad.UsuarioDAO;
import com.qbe.cotizador.dao.producto.agricola.AgriCotizacionMaxDAO;
import com.qbe.cotizador.dao.producto.agricola.AgriParametroXPuntoVentaDAO;
import com.qbe.cotizador.dao.producto.vehiculocerrado.GrupoPorProductoDAO;
import com.qbe.cotizador.dao.seguridad.TipoVariableDAO;
import com.qbe.cotizador.dao.seguridad.VariableSistemaDAO;
import com.qbe.cotizador.model.ActividadEconomica;
import com.qbe.cotizador.model.AgriAuditoriaCotizacion;
import com.qbe.cotizador.model.AgriCotizacionMax;
import com.qbe.cotizador.model.AgriObjetoCotizacion;
import com.qbe.cotizador.model.AgriParametroXPuntoVenta;
import com.qbe.cotizador.model.AgriSucreAuditoria;
import com.qbe.cotizador.model.Beneficiario;
import com.qbe.cotizador.model.Cliente;
import com.qbe.cotizador.model.Cotizacion;
import com.qbe.cotizador.model.CotizacionDetalle;
import com.qbe.cotizador.model.EndosoBeneficiario;
import com.qbe.cotizador.model.Entidad;
import com.qbe.cotizador.model.GrupoPorProducto;
import com.qbe.cotizador.model.ProductoXPuntoVenta;
import com.qbe.cotizador.model.PuntoVenta;
import com.qbe.cotizador.model.TipoVariable;
import com.qbe.cotizador.model.VariableSistema;
import com.qbe.cotizador.transaction.cotizacion.CotizacionDetalleTransaction;
import com.qbe.cotizador.transaction.cotizacion.CotizacionTransaction;
import com.qbe.cotizador.transaction.cotizacion.EndosoBeneficiarioTransaction;
import com.qbe.cotizador.transaction.entidad.ClienteTransaction;
import com.qbe.cotizador.transaction.entidad.EntidadTransaction;
import com.qbe.cotizador.transaction.producto.agricola.AgriAuditoriaCotizacionTransaction;
import com.qbe.cotizador.transaction.producto.agricola.AgriObjetoCotizacionTransaction;
import com.qbe.cotizador.transaction.producto.agricola.AgriSucreAuditoriaTransaction;

public class AgriProcesarCotizacionOffline {
	public static AgriRespuestaOffline procesarCotizacion(CotizacionAgricola nuevaCotizacion, String tipoOrigen,String correo,String CCCorreos){
		
		AgriRespuestaOffline agriRespuestaOffline= new AgriRespuestaOffline();
		agriRespuestaOffline.setAgente(nuevaCotizacion.getUsuarioApellido() +" "+nuevaCotizacion.getNombres());
		agriRespuestaOffline.setCorreo(correo+","+CCCorreos);
		agriRespuestaOffline.setClienteNombre(nuevaCotizacion.getApellidos()+" "+nuevaCotizacion.getNombres());
		agriRespuestaOffline.setClienteIdentificar(nuevaCotizacion.getNumeroIdentificacion());
		//Proceso de auditoria para canales
		AgriSucreAuditoria auditoria = new AgriSucreAuditoria();
		AgriSucreAuditoriaTransaction procesoAuditoria = new AgriSucreAuditoriaTransaction();
		auditoria.setTramite("" + nuevaCotizacion.getNumeroIdentificacion());
		String DatosRecibidos = " AUDITORIA CANALES OFFLINE: Correos Provenientes: "+correo+"|"+CCCorreos+"  Apellidos : "+nuevaCotizacion.getApellidos()+" ApellidosENCRIP"+nuevaCotizacion.getApellidos().replace("|A", "Á").replace("|E","É").replace("|I","Í").replace("|O","Ó").replace("|U", "Ú")
                .replace("|a", "á").replace("|e", "é").replace("|i","í").replace("|o","ó").replace("|u","ú")
                .replace("-", "Ñ").replace("_", "ñ")+ " Celular : "+nuevaCotizacion.getCelular()
				+" DireccionSiembra : "+nuevaCotizacion.getDireccionSiembra()+" DireccionSiembraEncrip : "+nuevaCotizacion.getDireccionSiembra().replace("|A", "Á").replace("|E","É").replace("|I","Í").replace("|O","Ó").replace("|U", "Ú")
                .replace("|a", "á").replace("|e", "é").replace("|i","í").replace("|o","ó").replace("|u","ú")
                .replace("-", "Ñ").replace("_", "ñ")+ " Email : "+nuevaCotizacion.getEmail()+ " Nombres : "+nuevaCotizacion.getNombres()+" apellidosENCRIP"+nuevaCotizacion.getNombres().replace("|A", "Á").replace("|E","É").replace("|I","Í").replace("|O","Ó").replace("|U", "Ú")
                .replace("|a", "á").replace("|e", "é").replace("|i","í").replace("|o","ó").replace("|u","ú")
                .replace("-", "Ñ").replace("_", "ñ")
				+ " NumeroIdentificacion : "+nuevaCotizacion.getNumeroIdentificacion()+" ObjetoCotizacionId : "+nuevaCotizacion.getObjetoCotizacionId()
				+ " Observaciones : "+nuevaCotizacion.getObservaciones()+ " PuntoVentaId : "+nuevaCotizacion.getPuntoVentaId()+ " Telefono : "+nuevaCotizacion.getTelefono()
				+ " UsuarioApellido : "+nuevaCotizacion.getUsuarioApellido()+ " UsuarioNombre : "+nuevaCotizacion.getUsuarioNombre()+" AnalisisMontoAsegurado : "+nuevaCotizacion.getAnalisisMontoAsegurado()
				+ " DerechoEmision : "+nuevaCotizacion.getDerechoEmision()+" EdadCultivo : "+nuevaCotizacion.getEdadCultivo()+ " Estado : "+nuevaCotizacion.getEstado()
				+ " HectareasAsegurables : "+nuevaCotizacion.getHectareasAsegurables()+" HectareasLote : "+nuevaCotizacion.getHectareasLote()+ " Iva : "+ nuevaCotizacion.getIva()
				+ " Latitud : " +nuevaCotizacion.getLatitud()+ " Longitud : "+nuevaCotizacion.getLongitud()+ " MontoCredito : "+ nuevaCotizacion.getMontoCredito()
				+ " MontoCreditoSinSeguro : "+nuevaCotizacion.getMontoCreditoSinSeguro()+ " PrimaNeta : "+nuevaCotizacion.getPrimaNeta()+ " SeguroCampesino : "+nuevaCotizacion.getSeguroCampesino()
				+ " SuperBancos :  "+nuevaCotizacion.getSuperBancos()+ " Tasa : "+nuevaCotizacion.getTasa()+ " TipoSeguro : "+nuevaCotizacion.getTipoSeguro()
				+ " TotalCredito : "+nuevaCotizacion.getTotalCredito()+ " TotalPrima : "+nuevaCotizacion.getTotalPrima()+ " Agencia : "+nuevaCotizacion.getAgencia()
				+ " AgricultorTecnificado : "+ nuevaCotizacion.getAgricultorTecnificado()+ " CantonId "+nuevaCotizacion.getCantonId()+ " DisponeAsistencia : "+nuevaCotizacion.getDisponeAsistencia()
				+ " FechaCreacionCotizacion : "+ nuevaCotizacion.getFechaCreacionCotizacion()+ " FechaSiembra : "+nuevaCotizacion.getFechaSiembra()+" ParroquiaId : "+nuevaCotizacion.getParroquiaId()
				+ " ProvinciaId : "+nuevaCotizacion.getProvinciaId()+ " ReglaId : "+nuevaCotizacion.getReglaId()+" TieneObservacion : "+ nuevaCotizacion.getTieneObservacion()
				+ " TipoCultivoId : "+nuevaCotizacion.getTipoCultivoId()+ " TipoIdentificacion : "+nuevaCotizacion.getTipoIdentificacion()+ " Variedad : "+nuevaCotizacion.getVariedad();
		
		auditoria.setObjeto(DatosRecibidos);
		java.util.Date date2 = new java.util.Date();
		java.sql.Timestamp sq2 = new java.sql.Timestamp(date2.getTime());
		SimpleDateFormat formatoDelTexto = new SimpleDateFormat("dd/mm/yy");
		auditoria.setFecha(sq2);
		auditoria.setCanal("OFFLINE");
		auditoria.setEstado("Ingreso");
		
		try{
			procesoAuditoria.crear(auditoria);
		}
		catch(Exception e){
			e.printStackTrace();
		}		
		//Inicia el proceso de cotizacion
		try{
			EntidadDAO entidadDAO = new EntidadDAO();
			ClienteDAO clienteDAO = new ClienteDAO();
			TipoEntidadDAO tipoEntidadDAO = new TipoEntidadDAO();
			TipoIdentificacionDAO tipoDAO = new TipoIdentificacionDAO();
			PuntoVentaDAO pvDAO = new PuntoVentaDAO();
			VigenciaPolizaDAO vpDAO= new  VigenciaPolizaDAO();
			GrupoPorProductoDAO grupoPorProductoDAO = new GrupoPorProductoDAO();
			ProductoXPuntoVentaDAO productoPorPuntoVentaDAO=new ProductoXPuntoVentaDAO();
			TipoObjetoDAO tipoObjetoDAO = new TipoObjetoDAO();
			UsuarioDAO usuarioDAO=new UsuarioDAO();
			EstadoDAO estadoDAO=new EstadoDAO();
			Entidad entidad = new Entidad();
			Cliente cliente = new Cliente();
			Cotizacion cotizacion = new Cotizacion();
			CotizacionTransaction cotizacionTransaction = new CotizacionTransaction(); 
			CotizacionDetalleTransaction cotizacionDetalleTransaction = new CotizacionDetalleTransaction();
			EntidadTransaction entidadTransaction = new EntidadTransaction();
			ClienteTransaction clienteTransaction = new ClienteTransaction();
			AgriObjetoCotizacionTransaction agriObjetoCotizacionTransaction = new AgriObjetoCotizacionTransaction();
	
			if(nuevaCotizacion.getDireccionSiembra()==null||nuevaCotizacion.getDireccionSiembra().equals(""))
				throw new Exception("No tiene lugar de siembra");
			
			//Busco si la entidad existe
			entidad = entidadDAO.buscarEntidadPorIdentificacion(nuevaCotizacion.getNumeroIdentificacion());
	
			if(!nuevaCotizacion.getNumeroIdentificacion().equals(""))
				entidad.setIdentificacion(nuevaCotizacion.getNumeroIdentificacion());
			
			if(!nuevaCotizacion.getNombres().equals(""))
				entidad.setNombres(""+nuevaCotizacion.getNombres().replace("|A", "Á").replace("|E","É").replace("|I","Í").replace("|O","Ó").replace("|U", "Ú")
                        .replace("|a", "á").replace("|e", "é").replace("|i","í").replace("|o","ó").replace("|u","ú")
                        .replace("-", "Ñ").replace("_", "ñ").trim());
			
			if(!nuevaCotizacion.getApellidos().equals(""))
				entidad.setApellidos(""+nuevaCotizacion.getApellidos().trim().replace("|A", "Á").replace("|E","É").replace("|I","Í").replace("|O","Ó").replace("|U", "Ú")
                        .replace("|a", "á").replace("|e", "é").replace("|i","í").replace("|o","ó").replace("|u","ú")
                        .replace("-", "Ñ").replace("_", "ñ"));
				
			entidad.setNombreCompleto(""+nuevaCotizacion.getApellidos()+ " " + nuevaCotizacion.getNombres());
	
			if(!nuevaCotizacion.getTelefono().equals(""))
				entidad.setTelefono(nuevaCotizacion.getTelefono());
	
			if(!nuevaCotizacion.getCelular().equals(""))
				entidad.setCelular(nuevaCotizacion.getCelular());
	
			if(!nuevaCotizacion.getEmail().equals(""))
				entidad.setMail(nuevaCotizacion.getEmail());
	
			if(!nuevaCotizacion.getTipoIdentificacion().equals(""))
				entidad.setTipoIdentificacion(tipoDAO.buscarPorId(nuevaCotizacion.getTipoIdentificacion().toString()));
	
			if(nuevaCotizacion.getTipoIdentificacion().toString().equalsIgnoreCase("1") || nuevaCotizacion.getTipoIdentificacion().toString().equalsIgnoreCase("1")){
				entidad.setTipoEntidad(tipoEntidadDAO.buscarPorId("1"));
			}else{
				entidad.setTipoEntidad(tipoEntidadDAO.buscarPorId("2"));
			}
	
			//Si el cliente existe solo lo actualizo, si no lo creo!!
			if(entidad.getId()==null)
				entidad=entidadTransaction.crear(entidad);
			else
				entidad=entidadTransaction.editar(entidad);
	
			//busco el cliente 
			cliente = clienteDAO.buscarPorEntidadId(entidad);
	
			//si no hay el cliente lo creo caso contrario no hago nada
			if(cliente.getId() == null){
				ActividadEconomica actividad = new ActividadEconomica();
				ActividadEconomicaDAO actividadDAO = new ActividadEconomicaDAO();
				actividad = actividadDAO.buscarPorNombre("Ninguno");	
				Cliente clienteNuevo = new Cliente();
				clienteNuevo.setEntidad(entidad);
				clienteNuevo.setActividadEconomica(actividad);
				clienteNuevo.setActivo(true);
				cliente=clienteTransaction.crear(clienteNuevo);				
			}
			cotizacion.setAsegurado(entidad);
			PuntoVenta puntoVenta = pvDAO.buscarPorId(nuevaCotizacion.getPuntoVentaId()); //TODO: Quemado punto de venta
			cotizacion.setPuntoVenta(puntoVenta); 
			//grupo por producto Agricola
			GrupoPorProducto grupoPorProducto = grupoPorProductoDAO.buscarPorId("177");
			ProductoXPuntoVenta pxpv=productoPorPuntoVentaDAO.buscarPorGrupoPuntoVenta(grupoPorProducto, puntoVenta);
			cotizacion.setProductoXPuntoVentaId(new BigInteger(pxpv.getId()));
			cotizacion.setVigenciaPoliza(vpDAO.buscarPorId("1"));										
			cotizacion.setClienteId(BigInteger.valueOf(Long.valueOf(cliente.getId())));
			cotizacion.setGrupoProductoId(BigInteger.valueOf(Long.valueOf(grupoPorProducto.getGrupoProducto().getId())));
			cotizacion.setGrupoPorProductoId(BigInteger.valueOf(Long.valueOf(grupoPorProducto.getId())));
			cotizacion.setProducto(grupoPorProducto.getProducto());
			cotizacion.setTipoObjeto(tipoObjetoDAO.buscarPorNombre("Agricola"));
			cotizacion.setUsuario(usuarioDAO.buscarPorLogin("e63_1708971229")); //TODO: Quemado usuario
			java.sql.Timestamp sq = new java.sql.Timestamp(nuevaCotizacion.getFechaCreacionCotizacion().getTime());
			cotizacion.setFechaElaboracion(sq);
			
	        AgriParametroXPuntoVentaDAO agriParametroXPuntoVentaDAO = new AgriParametroXPuntoVentaDAO();
	        AgriParametroXPuntoVenta agriParametroXPuntoVenta = new AgriParametroXPuntoVenta();
	        agriParametroXPuntoVenta=agriParametroXPuntoVentaDAO.buscarPorPuntoVentaId(new BigInteger(puntoVenta.getId()));
	        
	        cotizacion.setAgenteId(new BigInteger(agriParametroXPuntoVenta.getAgenteId()));
	        cotizacion.setPorcentajeComision(Double.parseDouble(agriParametroXPuntoVenta.getPorcentajeComision()));
	        
			if(nuevaCotizacion.getDerechoEmision() == null)
				cotizacion.setImpDerechoEmision(0.0);
			else
				cotizacion.setImpDerechoEmision(nuevaCotizacion.getDerechoEmision());
			
			if(nuevaCotizacion.getSeguroCampesino() == null)
				cotizacion.setImpSeguroCampesino(0.0);
			else
				cotizacion.setImpSeguroCampesino(nuevaCotizacion.getSeguroCampesino());
			
			if(nuevaCotizacion.getSuperBancos() == null)
				cotizacion.setImpSuperBancos(0.0);
			else
				cotizacion.setImpSuperBancos(nuevaCotizacion.getSuperBancos());
			
			if(nuevaCotizacion.getIva() == null)
				cotizacion.setImpIva(0.0);
			else
				cotizacion.setImpIva(nuevaCotizacion.getIva());		
	
			if (nuevaCotizacion.getAnalisisMontoAsegurado()==null)
				cotizacion.setSumaAseguradaTotal(0.0);
			else 
				cotizacion.setSumaAseguradaTotal(nuevaCotizacion.getAnalisisMontoAsegurado());
			
			if (nuevaCotizacion.getPrimaNeta()==null)
				cotizacion.setPrimaNetaTotal("0.0");
			else 
				cotizacion.setPrimaNetaTotal(nuevaCotizacion.getPrimaNeta().toString());
	
			if(nuevaCotizacion.getTotalPrima() == null || nuevaCotizacion.getTotalPrima()==0) {
				cotizacion.setTotalFactura(0.0);
				cotizacion.setEstado(estadoDAO.buscarPorNombre("Pendiente Aprobar","Cotizacion"));
			}else {	
				//Controlar si tiene observacion de regla entra a pendiente de aprobar
				if (nuevaCotizacion.getTieneObservacion()==false)
					cotizacion.setEstado(estadoDAO.buscarPorNombre("Pendiente de Emitir","Cotizacion"));
				else 
					cotizacion.setEstado(estadoDAO.buscarPorNombre("Pendiente Aprobar","Cotizacion"));
				cotizacion.setTotalFactura(nuevaCotizacion.getTotalPrima());		
			}
			
			cotizacion.setEtapaWizard(3);
			cotizacion.setValorDescuento(0);
			
			if(cotizacion.getId()!=null)
				cotizacion = cotizacionTransaction.editar(cotizacion);	
			else
				cotizacion = cotizacionTransaction.crear(cotizacion);
	
			
			//Inicia la creación del objeto de la cotización agricola.
			//Inserta el detalle de la cotización
			AgriObjetoCotizacion agriObjetoCotizacion=new AgriObjetoCotizacion();
			agriObjetoCotizacion.setProvinciaId(nuevaCotizacion.getProvinciaId());
			agriObjetoCotizacion.setCantonId(nuevaCotizacion.getCantonId());
			//agriObjetoCotizacion.setParroquiaId(nuevaCotizacion.getParroquiaId());
			try{
				agriObjetoCotizacion.setAgriParroquiaId(nuevaCotizacion.getParroquiaId().toString());
			}catch(Exception e){
				throw new Exception("la cotizacion no contiene la parroquia de siembra");
			}
			agriObjetoCotizacion.setTipoCultivoId(nuevaCotizacion.getTipoCultivoId());
			if(nuevaCotizacion.getVariedad()!=null)
				agriObjetoCotizacion.setVariedad(nuevaCotizacion.getVariedad().toString());
			agriObjetoCotizacion.setAgricultorTecnificado(nuevaCotizacion.getAgricultorTecnificado());
			agriObjetoCotizacion.setDisponeRiego(nuevaCotizacion.getDisponeRiego());
			agriObjetoCotizacion.setDisponeAsistencia(nuevaCotizacion.getDisponeAsistencia());
			agriObjetoCotizacion.setAgricultorTecnificado(nuevaCotizacion.getAgricultorTecnificado());
			
			agriObjetoCotizacion.setDireccionSiembra(nuevaCotizacion.getDireccionSiembra().replace("|A", "Á").replace("|E","É").replace("|I","Í").replace("|O","Ó").replace("|U", "Ú")
                    .replace("|a", "á").replace("|e", "é").replace("|i","í").replace("|o","ó").replace("|u","ú")
                    .replace("-", "Ñ").replace("_", "ñ"));
			agriObjetoCotizacion.setTipoSeguro(nuevaCotizacion.getTipoSeguro());
			agriObjetoCotizacion.setAniosCultivo(nuevaCotizacion.getEdadCultivo());
			agriObjetoCotizacion.setHectareasLote(new Float(nuevaCotizacion.getHectareasLote()));
			agriObjetoCotizacion.setLatitud(new Float(nuevaCotizacion.getLatitud()));
			agriObjetoCotizacion.setLongitud(new Float(nuevaCotizacion.getLongitud()));
			agriObjetoCotizacion.setHectareasAsegurables(new Float(nuevaCotizacion.getHectareasAsegurables()));
			agriObjetoCotizacion.setMontoCredito(new Float(nuevaCotizacion.getMontoCredito()));
			agriObjetoCotizacion.setFechaCredito(nuevaCotizacion.getFechaCredito());
			agriObjetoCotizacion.setFechaSiembra(nuevaCotizacion.getFechaSiembra());
			agriObjetoCotizacion.setObjetoOfflineId(nuevaCotizacion.getObjetoCotizacionId());
			agriObjetoCotizacion.setUsuarioOffline(nuevaCotizacion.getUsuarioNombre()+" "+nuevaCotizacion.getUsuarioApellido());
			agriObjetoCotizacion.setTipoOrigen(tipoOrigen);
			///TODO: Nuevos campos en la tabla cotizacion 
			//Proceso de guardado del costo de produccion.
			double sumaAsegurada=nuevaCotizacion.getAnalisisMontoAsegurado();
			double NumeroHectareas=nuevaCotizacion.getHectareasAsegurables();
			double CostoProduccion=sumaAsegurada/NumeroHectareas;
			BigDecimal a = new BigDecimal(""+CostoProduccion);
			BigDecimal roundOff = a.setScale(2, BigDecimal.ROUND_HALF_EVEN);
			agriObjetoCotizacion.setCostoProduccion(Float.parseFloat(""+roundOff));
			agriObjetoCotizacion.setCostoProduccionQBE(Float.parseFloat(""+roundOff));
			agriObjetoCotizacion.setObservacion(nuevaCotizacion.getObservaciones());
			if (nuevaCotizacion.getReglaId()!=null || !nuevaCotizacion.getReglaId().equals(""))
				agriObjetoCotizacion.setTipoCalculo(nuevaCotizacion.getReglaId().toString());
			//TODO: Grabar la agencia del offline e el campo entidad financiera del objeto 
			if (nuevaCotizacion.getAgencia()!=null)
				agriObjetoCotizacion.setCodEntidadFinanciera(nuevaCotizacion.getAgencia().toString());
			
			/***Proceso de creacion de las IdCotizaciones para facturacion***/
			
			AgriCotizacionMaxDAO busquedaMax = new AgriCotizacionMaxDAO();
			AgriCotizacionMax numMaximo=busquedaMax.buscarTodos();
			int numeroActual=numMaximo.getMaximo().intValue();
			agriObjetoCotizacion.setIdCotizacion2(new BigInteger(""+(numeroActual+1)));
			agriObjetoCotizacion.setConfirEmiCanal(true);
			agriObjetoCotizacion=agriObjetoCotizacionTransaction.crear(agriObjetoCotizacion);
			//Creo la cotización detalle
			CotizacionDetalle nuevoCotizacionDetalle=new CotizacionDetalle();
			nuevoCotizacionDetalle.setCotizacion(cotizacion);
			nuevoCotizacionDetalle.setNecesitaInspeccion(false);
			nuevoCotizacionDetalle.setTipoObjetoId(tipoObjetoDAO.buscarPorNombre("Agricola").getId());
			nuevoCotizacionDetalle.setObjetoId(agriObjetoCotizacion.getObjetoCotizacionId().toString());
			nuevoCotizacionDetalle.setSumaAseguradaItem(nuevaCotizacion.getAnalisisMontoAsegurado());
			nuevoCotizacionDetalle.setPrimaNetaItem(nuevaCotizacion.getPrimaNeta());
			if (nuevaCotizacion.getTasa()==null)
				nuevoCotizacionDetalle.setTasa(0.0);
			else 
				nuevoCotizacionDetalle.setTasa(nuevaCotizacion.getTasa());
			cotizacionDetalleTransaction.crear(nuevoCotizacionDetalle);
			//TODO: Grabar el numero de trámite 
			cotizacion.setNumeroTramite(cotizacion.getId());
			cotizacion = cotizacionTransaction.editar(cotizacion);	
			try{
				/**PROCESO DE CREACION DEL DETALLE DE LA COTIZACION ENDOSO***/
				AgriCotizacionDetalleProcesos agriCotizacionDetalleProcesos = new AgriCotizacionDetalleProcesos();
				agriCotizacionDetalleProcesos.creardetalleCotizacion(cotizacion, "Registro Solicitud");
				/**FIN DE REGISTRO DE ENDOSO**/
			}catch(Exception e){
				e.printStackTrace();
			}
			if(cotizacion.getEstado().getNombre().equals("Pendiente de Emitir")){
				AgriAuditoriaCotizacion agriAuditoriaCotizacion = new AgriAuditoriaCotizacion();
				AgriAuditoriaCotizacionTransaction agriAuditoriaCotizacionTransaction = new AgriAuditoriaCotizacionTransaction();
				agriAuditoriaCotizacion.setCotizacionId(new BigInteger(cotizacion.getId()));
				agriAuditoriaCotizacion.setFecha(sq);
				agriAuditoriaCotizacion.setTipoActividad("APROBADO REVISION");
				agriAuditoriaCotizacion.setUsuarioId(new BigInteger("0"));
				agriAuditoriaCotizacionTransaction.crear(agriAuditoriaCotizacion);
			}
			
			auditoria.setObjeto("Correcto: cotizacion ID: "+cotizacion.getId());
			procesoAuditoria.crear(auditoria);
			agriRespuestaOffline.setCotizacion(cotizacion.getId());
			agriRespuestaOffline.setError("");
			agriRespuestaOffline.setRazon("");			
			return agriRespuestaOffline;
		}catch(Exception e){
			agriRespuestaOffline.setCotizacion("");
			auditoria.setObjeto("ERROR: no se proceso por el siguiente error: "+e.getMessage());
			procesoAuditoria.crear(auditoria);
			e.printStackTrace();
			agriRespuestaOffline.setError("ERROR:"+e.getMessage());
			agriRespuestaOffline.setRazon(e.getMessage());			
			return agriRespuestaOffline;
		}
	}
}
